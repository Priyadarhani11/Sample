/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.student.permission.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.student.permission.model.Student;
import com.student.permission.model.StudentModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Student service. Represents a row in the &quot;DEMO_Student&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StudentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentImpl
 * @generated
 */
@JSON(strict = true)
public class StudentModelImpl
	extends BaseModelImpl<Student> implements StudentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student model instance should use the <code>Student</code> interface instead.
	 */
	public static final String TABLE_NAME = "DEMO_Student";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"studentId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"studentName", Types.VARCHAR}, {"studentMobileNumber", Types.VARCHAR},
		{"studentDesignation", Types.VARCHAR}, {"studentphoto", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("studentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentMobileNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentDesignation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentphoto", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DEMO_Student (uuid_ VARCHAR(75) null,studentId LONG not null primary key,groupId LONG,companyId LONG,studentName VARCHAR(75) null,studentMobileNumber VARCHAR(75) null,studentDesignation VARCHAR(75) null,studentphoto VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table DEMO_Student";

	public static final String ORDER_BY_JPQL =
		" ORDER BY student.studentId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DEMO_Student.studentId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUDENTDESIGNATION_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUDENTID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public StudentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _studentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStudentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _studentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Student.class;
	}

	@Override
	public String getModelClassName() {
		return Student.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Student, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Student)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Student, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Student, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Student)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Student, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Student, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Student, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Student, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Student, Object>>();

			attributeGetterFunctions.put("uuid", Student::getUuid);
			attributeGetterFunctions.put("studentId", Student::getStudentId);
			attributeGetterFunctions.put("groupId", Student::getGroupId);
			attributeGetterFunctions.put("companyId", Student::getCompanyId);
			attributeGetterFunctions.put(
				"studentName", Student::getStudentName);
			attributeGetterFunctions.put(
				"studentMobileNumber", Student::getStudentMobileNumber);
			attributeGetterFunctions.put(
				"studentDesignation", Student::getStudentDesignation);
			attributeGetterFunctions.put(
				"studentphoto", Student::getStudentphoto);
			attributeGetterFunctions.put("createDate", Student::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Student::getModifiedDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Student, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Student, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Student, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Student, String>)Student::setUuid);
			attributeSetterBiConsumers.put(
				"studentId", (BiConsumer<Student, Long>)Student::setStudentId);
			attributeSetterBiConsumers.put(
				"groupId", (BiConsumer<Student, Long>)Student::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId", (BiConsumer<Student, Long>)Student::setCompanyId);
			attributeSetterBiConsumers.put(
				"studentName",
				(BiConsumer<Student, String>)Student::setStudentName);
			attributeSetterBiConsumers.put(
				"studentMobileNumber",
				(BiConsumer<Student, String>)Student::setStudentMobileNumber);
			attributeSetterBiConsumers.put(
				"studentDesignation",
				(BiConsumer<Student, String>)Student::setStudentDesignation);
			attributeSetterBiConsumers.put(
				"studentphoto",
				(BiConsumer<Student, String>)Student::setStudentphoto);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Student, Date>)Student::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Student, Date>)Student::setModifiedDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getStudentId() {
		return _studentId;
	}

	@Override
	public void setStudentId(long studentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentId = studentId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public String getStudentName() {
		if (_studentName == null) {
			return "";
		}
		else {
			return _studentName;
		}
	}

	@Override
	public void setStudentName(String studentName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentName = studentName;
	}

	@JSON
	@Override
	public String getStudentMobileNumber() {
		if (_studentMobileNumber == null) {
			return "";
		}
		else {
			return _studentMobileNumber;
		}
	}

	@Override
	public void setStudentMobileNumber(String studentMobileNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentMobileNumber = studentMobileNumber;
	}

	@JSON
	@Override
	public String getStudentDesignation() {
		if (_studentDesignation == null) {
			return "";
		}
		else {
			return _studentDesignation;
		}
	}

	@Override
	public void setStudentDesignation(String studentDesignation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentDesignation = studentDesignation;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStudentDesignation() {
		return getColumnOriginalValue("studentDesignation");
	}

	@JSON
	@Override
	public String getStudentphoto() {
		if (_studentphoto == null) {
			return "";
		}
		else {
			return _studentphoto;
		}
	}

	@Override
	public void setStudentphoto(String studentphoto) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentphoto = studentphoto;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Student.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Student.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Student toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Student>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentImpl studentImpl = new StudentImpl();

		studentImpl.setUuid(getUuid());
		studentImpl.setStudentId(getStudentId());
		studentImpl.setGroupId(getGroupId());
		studentImpl.setCompanyId(getCompanyId());
		studentImpl.setStudentName(getStudentName());
		studentImpl.setStudentMobileNumber(getStudentMobileNumber());
		studentImpl.setStudentDesignation(getStudentDesignation());
		studentImpl.setStudentphoto(getStudentphoto());
		studentImpl.setCreateDate(getCreateDate());
		studentImpl.setModifiedDate(getModifiedDate());

		studentImpl.resetOriginalValues();

		return studentImpl;
	}

	@Override
	public Student cloneWithOriginalValues() {
		StudentImpl studentImpl = new StudentImpl();

		studentImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		studentImpl.setStudentId(
			this.<Long>getColumnOriginalValue("studentId"));
		studentImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		studentImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		studentImpl.setStudentName(
			this.<String>getColumnOriginalValue("studentName"));
		studentImpl.setStudentMobileNumber(
			this.<String>getColumnOriginalValue("studentMobileNumber"));
		studentImpl.setStudentDesignation(
			this.<String>getColumnOriginalValue("studentDesignation"));
		studentImpl.setStudentphoto(
			this.<String>getColumnOriginalValue("studentphoto"));
		studentImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		studentImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return studentImpl;
	}

	@Override
	public int compareTo(Student student) {
		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Student)) {
			return false;
		}

		Student student = (Student)object;

		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Student> toCacheModel() {
		StudentCacheModel studentCacheModel = new StudentCacheModel();

		studentCacheModel.uuid = getUuid();

		String uuid = studentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			studentCacheModel.uuid = null;
		}

		studentCacheModel.studentId = getStudentId();

		studentCacheModel.groupId = getGroupId();

		studentCacheModel.companyId = getCompanyId();

		studentCacheModel.studentName = getStudentName();

		String studentName = studentCacheModel.studentName;

		if ((studentName != null) && (studentName.length() == 0)) {
			studentCacheModel.studentName = null;
		}

		studentCacheModel.studentMobileNumber = getStudentMobileNumber();

		String studentMobileNumber = studentCacheModel.studentMobileNumber;

		if ((studentMobileNumber != null) &&
			(studentMobileNumber.length() == 0)) {

			studentCacheModel.studentMobileNumber = null;
		}

		studentCacheModel.studentDesignation = getStudentDesignation();

		String studentDesignation = studentCacheModel.studentDesignation;

		if ((studentDesignation != null) &&
			(studentDesignation.length() == 0)) {

			studentCacheModel.studentDesignation = null;
		}

		studentCacheModel.studentphoto = getStudentphoto();

		String studentphoto = studentCacheModel.studentphoto;

		if ((studentphoto != null) && (studentphoto.length() == 0)) {
			studentCacheModel.studentphoto = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			studentCacheModel.createDate = createDate.getTime();
		}
		else {
			studentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			studentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			studentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return studentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Student, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Student)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Student>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Student.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _studentId;
	private long _groupId;
	private long _companyId;
	private String _studentName;
	private String _studentMobileNumber;
	private String _studentDesignation;
	private String _studentphoto;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Student, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Student)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("studentId", _studentId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("studentName", _studentName);
		_columnOriginalValues.put("studentMobileNumber", _studentMobileNumber);
		_columnOriginalValues.put("studentDesignation", _studentDesignation);
		_columnOriginalValues.put("studentphoto", _studentphoto);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("studentId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("studentName", 16L);

		columnBitmasks.put("studentMobileNumber", 32L);

		columnBitmasks.put("studentDesignation", 64L);

		columnBitmasks.put("studentphoto", 128L);

		columnBitmasks.put("createDate", 256L);

		columnBitmasks.put("modifiedDate", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Student _escapedModel;

}